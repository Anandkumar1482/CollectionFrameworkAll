) If we want to represent a group of individual objects prior (happening before something
else) to processing then we should go for Queue interface.
Diagram:
2) Usually Queue follows first in first out order but based on our requirement we can
implement our own order also.
3) From 1.5v onwards LinkedList also implements Queue interface.
4) LinkedList based implementation of Queue always follows first in first out order.
**********************************************************************
Queue interface methods:
***********************************************************************
1) boolean offer(Object o);
To add an object to the Queue.
2) Object poll() ;
 To remove and return head element of the Queue, if Queue is empty then we will get
null.
3) Object remove();
 To remove and return head element of the Queue. If Queue is empty then this method
raises Runtime Exception saying NoSuchElementException.
4) Object peek();
 To return head element of the Queue without removal, if Queue is empty this method
returns null.
5) Object element();
It returns head element of the Queue and if Queue is empty then it will raise Runtime
Exception saying NoSuchElementException.